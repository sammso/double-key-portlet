package com.sohlman.liferay.model;

import com.liferay.portal.LocaleException;
import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.model.BaseModel;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;

import com.sohlman.liferay.service.persistence.TestPK;

import java.io.Serializable;

import java.util.Locale;
import java.util.Map;

/**
 * The base model interface for the Test service. Represents a row in the &quot;DK_Test&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation {@link com.sohlman.liferay.model.impl.TestModelImpl} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link com.sohlman.liferay.model.impl.TestImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see Test
 * @see com.sohlman.liferay.model.impl.TestImpl
 * @see com.sohlman.liferay.model.impl.TestModelImpl
 * @generated
 */
public interface TestModel extends BaseModel<Test> {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this interface directly. All methods that expect a test model instance should use the {@link Test} interface instead.
     */

    /**
     * Returns the primary key of this test.
     *
     * @return the primary key of this test
     */
    public TestPK getPrimaryKey();

    /**
     * Sets the primary key of this test.
     *
     * @param primaryKey the primary key of this test
     */
    public void setPrimaryKey(TestPK primaryKey);

    /**
     * Returns the test one ID of this test.
     *
     * @return the test one ID of this test
     */
    @AutoEscape
    public String getTestOneId();

    /**
     * Sets the test one ID of this test.
     *
     * @param testOneId the test one ID of this test
     */
    public void setTestOneId(String testOneId);

    /**
     * Returns the test two ID of this test.
     *
     * @return the test two ID of this test
     */
    @AutoEscape
    public String getTestTwoId();

    /**
     * Sets the test two ID of this test.
     *
     * @param testTwoId the test two ID of this test
     */
    public void setTestTwoId(String testTwoId);

    /**
     * Returns the payload of this test.
     *
     * @return the payload of this test
     */
    @AutoEscape
    public String getPayload();

    /**
     * Sets the payload of this test.
     *
     * @param payload the payload of this test
     */
    public void setPayload(String payload);

    /**
     * Returns the modified of this test.
     *
     * @return the modified of this test
     */
    public String getModified();

    /**
     * Returns the localized modified of this test in the language. Uses the default language if no localization exists for the requested language.
     *
     * @param locale the locale of the language
     * @return the localized modified of this test
     */
    @AutoEscape
    public String getModified(Locale locale);

    /**
     * Returns the localized modified of this test in the language, optionally using the default language if no localization exists for the requested language.
     *
     * @param locale the local of the language
     * @param useDefault whether to use the default language if no localization exists for the requested language
     * @return the localized modified of this test. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
     */
    @AutoEscape
    public String getModified(Locale locale, boolean useDefault);

    /**
     * Returns the localized modified of this test in the language. Uses the default language if no localization exists for the requested language.
     *
     * @param languageId the ID of the language
     * @return the localized modified of this test
     */
    @AutoEscape
    public String getModified(String languageId);

    /**
     * Returns the localized modified of this test in the language, optionally using the default language if no localization exists for the requested language.
     *
     * @param languageId the ID of the language
     * @param useDefault whether to use the default language if no localization exists for the requested language
     * @return the localized modified of this test
     */
    @AutoEscape
    public String getModified(String languageId, boolean useDefault);

    @AutoEscape
    public String getModifiedCurrentLanguageId();

    @AutoEscape
    public String getModifiedCurrentValue();

    /**
     * Returns a map of the locales and localized modifieds of this test.
     *
     * @return the locales and localized modifieds of this test
     */
    public Map<Locale, String> getModifiedMap();

    /**
     * Sets the modified of this test.
     *
     * @param modified the modified of this test
     */
    public void setModified(String modified);

    /**
     * Sets the localized modified of this test in the language.
     *
     * @param modified the localized modified of this test
     * @param locale the locale of the language
     */
    public void setModified(String modified, Locale locale);

    /**
     * Sets the localized modified of this test in the language, and sets the default locale.
     *
     * @param modified the localized modified of this test
     * @param locale the locale of the language
     * @param defaultLocale the default locale
     */
    public void setModified(String modified, Locale locale, Locale defaultLocale);

    public void setModifiedCurrentLanguageId(String languageId);

    /**
     * Sets the localized modifieds of this test from the map of locales and localized modifieds.
     *
     * @param modifiedMap the locales and localized modifieds of this test
     */
    public void setModifiedMap(Map<Locale, String> modifiedMap);

    /**
     * Sets the localized modifieds of this test from the map of locales and localized modifieds, and sets the default locale.
     *
     * @param modifiedMap the locales and localized modifieds of this test
     * @param defaultLocale the default locale
     */
    public void setModifiedMap(Map<Locale, String> modifiedMap,
        Locale defaultLocale);

    @Override
    public boolean isNew();

    @Override
    public void setNew(boolean n);

    @Override
    public boolean isCachedModel();

    @Override
    public void setCachedModel(boolean cachedModel);

    @Override
    public boolean isEscapedModel();

    @Override
    public Serializable getPrimaryKeyObj();

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj);

    @Override
    public ExpandoBridge getExpandoBridge();

    @Override
    public void setExpandoBridgeAttributes(BaseModel<?> baseModel);

    @Override
    public void setExpandoBridgeAttributes(ExpandoBridge expandoBridge);

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext);

    public String[] getAvailableLanguageIds();

    public String getDefaultLanguageId();

    public void prepareLocalizedFieldsForImport() throws LocaleException;

    public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
        throws LocaleException;

    @Override
    public Object clone();

    @Override
    public int compareTo(Test test);

    @Override
    public int hashCode();

    @Override
    public CacheModel<Test> toCacheModel();

    @Override
    public Test toEscapedModel();

    @Override
    public Test toUnescapedModel();

    @Override
    public String toString();

    @Override
    public String toXmlString();
}
