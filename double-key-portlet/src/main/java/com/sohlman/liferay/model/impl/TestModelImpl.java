package com.sohlman.liferay.model.impl;

import com.liferay.portal.LocaleException;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.LocalizationUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.kernel.util.Validator;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import com.sohlman.liferay.model.Test;
import com.sohlman.liferay.model.TestModel;
import com.sohlman.liferay.model.TestSoap;
import com.sohlman.liferay.service.persistence.TestPK;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;

/**
 * The base model implementation for the Test service. Represents a row in the &quot;DK_Test&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.sohlman.liferay.model.TestModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TestImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see TestImpl
 * @see com.sohlman.liferay.model.Test
 * @see com.sohlman.liferay.model.TestModel
 * @generated
 */
@JSON(strict = true)
public class TestModelImpl extends BaseModelImpl<Test> implements TestModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a test model instance should use the {@link com.sohlman.liferay.model.Test} interface instead.
     */
    public static final String TABLE_NAME = "DK_Test";
    public static final Object[][] TABLE_COLUMNS = {
            { "testOneId", Types.VARCHAR },
            { "testTwoId", Types.VARCHAR },
            { "payload", Types.VARCHAR },
            { "modified", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table DK_Test (testOneId VARCHAR(75) not null,testTwoId VARCHAR(75) not null,payload VARCHAR(75) null,modified STRING null,primary key (testOneId, testTwoId))";
    public static final String TABLE_SQL_DROP = "drop table DK_Test";
    public static final String ORDER_BY_JPQL = " ORDER BY test.id.testOneId ASC, test.id.testTwoId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY DK_Test.testOneId ASC, DK_Test.testTwoId ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.sohlman.liferay.model.Test"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.sohlman.liferay.model.Test"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.sohlman.liferay.model.Test"));
    private static ClassLoader _classLoader = Test.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] { Test.class };
    private String _testOneId;
    private String _testTwoId;
    private String _payload;
    private String _modified;
    private String _modifiedCurrentLanguageId;
    private Test _escapedModel;

    public TestModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static Test toModel(TestSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        Test model = new TestImpl();

        model.setTestOneId(soapModel.getTestOneId());
        model.setTestTwoId(soapModel.getTestTwoId());
        model.setPayload(soapModel.getPayload());
        model.setModified(soapModel.getModified());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<Test> toModels(TestSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<Test> models = new ArrayList<Test>(soapModels.length);

        for (TestSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public TestPK getPrimaryKey() {
        return new TestPK(_testOneId, _testTwoId);
    }

    @Override
    public void setPrimaryKey(TestPK primaryKey) {
        setTestOneId(primaryKey.testOneId);
        setTestTwoId(primaryKey.testTwoId);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return new TestPK(_testOneId, _testTwoId);
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey((TestPK) primaryKeyObj);
    }

    @Override
    public Class<?> getModelClass() {
        return Test.class;
    }

    @Override
    public String getModelClassName() {
        return Test.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("testOneId", getTestOneId());
        attributes.put("testTwoId", getTestTwoId());
        attributes.put("payload", getPayload());
        attributes.put("modified", getModified());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        String testOneId = (String) attributes.get("testOneId");

        if (testOneId != null) {
            setTestOneId(testOneId);
        }

        String testTwoId = (String) attributes.get("testTwoId");

        if (testTwoId != null) {
            setTestTwoId(testTwoId);
        }

        String payload = (String) attributes.get("payload");

        if (payload != null) {
            setPayload(payload);
        }

        String modified = (String) attributes.get("modified");

        if (modified != null) {
            setModified(modified);
        }
    }

    @JSON
    @Override
    public String getTestOneId() {
        if (_testOneId == null) {
            return StringPool.BLANK;
        } else {
            return _testOneId;
        }
    }

    @Override
    public void setTestOneId(String testOneId) {
        _testOneId = testOneId;
    }

    @JSON
    @Override
    public String getTestTwoId() {
        if (_testTwoId == null) {
            return StringPool.BLANK;
        } else {
            return _testTwoId;
        }
    }

    @Override
    public void setTestTwoId(String testTwoId) {
        _testTwoId = testTwoId;
    }

    @JSON
    @Override
    public String getPayload() {
        if (_payload == null) {
            return StringPool.BLANK;
        } else {
            return _payload;
        }
    }

    @Override
    public void setPayload(String payload) {
        _payload = payload;
    }

    @JSON
    @Override
    public String getModified() {
        if (_modified == null) {
            return StringPool.BLANK;
        } else {
            return _modified;
        }
    }

    @Override
    public String getModified(Locale locale) {
        String languageId = LocaleUtil.toLanguageId(locale);

        return getModified(languageId);
    }

    @Override
    public String getModified(Locale locale, boolean useDefault) {
        String languageId = LocaleUtil.toLanguageId(locale);

        return getModified(languageId, useDefault);
    }

    @Override
    public String getModified(String languageId) {
        return LocalizationUtil.getLocalization(getModified(), languageId);
    }

    @Override
    public String getModified(String languageId, boolean useDefault) {
        return LocalizationUtil.getLocalization(getModified(), languageId,
            useDefault);
    }

    @Override
    public String getModifiedCurrentLanguageId() {
        return _modifiedCurrentLanguageId;
    }

    @JSON
    @Override
    public String getModifiedCurrentValue() {
        Locale locale = getLocale(_modifiedCurrentLanguageId);

        return getModified(locale);
    }

    @Override
    public Map<Locale, String> getModifiedMap() {
        return LocalizationUtil.getLocalizationMap(getModified());
    }

    @Override
    public void setModified(String modified) {
        _modified = modified;
    }

    @Override
    public void setModified(String modified, Locale locale) {
        setModified(modified, locale, LocaleUtil.getDefault());
    }

    @Override
    public void setModified(String modified, Locale locale, Locale defaultLocale) {
        String languageId = LocaleUtil.toLanguageId(locale);
        String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

        if (Validator.isNotNull(modified)) {
            setModified(LocalizationUtil.updateLocalization(getModified(),
                    "Modified", modified, languageId, defaultLanguageId));
        } else {
            setModified(LocalizationUtil.removeLocalization(getModified(),
                    "Modified", languageId));
        }
    }

    @Override
    public void setModifiedCurrentLanguageId(String languageId) {
        _modifiedCurrentLanguageId = languageId;
    }

    @Override
    public void setModifiedMap(Map<Locale, String> modifiedMap) {
        setModifiedMap(modifiedMap, LocaleUtil.getDefault());
    }

    @Override
    public void setModifiedMap(Map<Locale, String> modifiedMap,
        Locale defaultLocale) {
        if (modifiedMap == null) {
            return;
        }

        setModified(LocalizationUtil.updateLocalization(modifiedMap,
                getModified(), "Modified",
                LocaleUtil.toLanguageId(defaultLocale)));
    }

    @Override
    public String[] getAvailableLanguageIds() {
        Set<String> availableLanguageIds = new TreeSet<String>();

        Map<Locale, String> modifiedMap = getModifiedMap();

        for (Map.Entry<Locale, String> entry : modifiedMap.entrySet()) {
            Locale locale = entry.getKey();
            String value = entry.getValue();

            if (Validator.isNotNull(value)) {
                availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
            }
        }

        return availableLanguageIds.toArray(new String[availableLanguageIds.size()]);
    }

    @Override
    public String getDefaultLanguageId() {
        String xml = getModified();

        if (xml == null) {
            return StringPool.BLANK;
        }

        Locale defaultLocale = LocaleUtil.getDefault();

        return LocalizationUtil.getDefaultLanguageId(xml, defaultLocale);
    }

    @Override
    public void prepareLocalizedFieldsForImport() throws LocaleException {
        prepareLocalizedFieldsForImport(null);
    }

    @Override
    @SuppressWarnings("unused")
    public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
        throws LocaleException {
        Locale defaultLocale = LocaleUtil.getDefault();

        String modelDefaultLanguageId = getDefaultLanguageId();

        String modified = getModified(defaultLocale);

        if (Validator.isNull(modified)) {
            setModified(getModified(modelDefaultLanguageId), defaultLocale);
        } else {
            setModified(getModified(defaultLocale), defaultLocale, defaultLocale);
        }
    }

    @Override
    public Test toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (Test) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        TestImpl testImpl = new TestImpl();

        testImpl.setTestOneId(getTestOneId());
        testImpl.setTestTwoId(getTestTwoId());
        testImpl.setPayload(getPayload());
        testImpl.setModified(getModified());

        testImpl.resetOriginalValues();

        return testImpl;
    }

    @Override
    public int compareTo(Test test) {
        TestPK primaryKey = test.getPrimaryKey();

        return getPrimaryKey().compareTo(primaryKey);
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof Test)) {
            return false;
        }

        Test test = (Test) obj;

        TestPK primaryKey = test.getPrimaryKey();

        if (getPrimaryKey().equals(primaryKey)) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey().hashCode();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<Test> toCacheModel() {
        TestCacheModel testCacheModel = new TestCacheModel();

        testCacheModel.testOneId = getTestOneId();

        String testOneId = testCacheModel.testOneId;

        if ((testOneId != null) && (testOneId.length() == 0)) {
            testCacheModel.testOneId = null;
        }

        testCacheModel.testTwoId = getTestTwoId();

        String testTwoId = testCacheModel.testTwoId;

        if ((testTwoId != null) && (testTwoId.length() == 0)) {
            testCacheModel.testTwoId = null;
        }

        testCacheModel.payload = getPayload();

        String payload = testCacheModel.payload;

        if ((payload != null) && (payload.length() == 0)) {
            testCacheModel.payload = null;
        }

        testCacheModel.modified = getModified();

        String modified = testCacheModel.modified;

        if ((modified != null) && (modified.length() == 0)) {
            testCacheModel.modified = null;
        }

        return testCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(9);

        sb.append("{testOneId=");
        sb.append(getTestOneId());
        sb.append(", testTwoId=");
        sb.append(getTestTwoId());
        sb.append(", payload=");
        sb.append(getPayload());
        sb.append(", modified=");
        sb.append(getModified());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(16);

        sb.append("<model><model-name>");
        sb.append("com.sohlman.liferay.model.Test");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>testOneId</column-name><column-value><![CDATA[");
        sb.append(getTestOneId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>testTwoId</column-name><column-value><![CDATA[");
        sb.append(getTestTwoId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>payload</column-name><column-value><![CDATA[");
        sb.append(getPayload());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modified</column-name><column-value><![CDATA[");
        sb.append(getModified());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
