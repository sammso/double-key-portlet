package com.sohlman.liferay.service.base;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.service.BaseServiceImpl;
import com.liferay.portal.service.persistence.UserPersistence;

import com.sohlman.liferay.model.Test;
import com.sohlman.liferay.service.TestService;
import com.sohlman.liferay.service.persistence.TestPersistence;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the test remote service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.sohlman.liferay.service.impl.TestServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see com.sohlman.liferay.service.impl.TestServiceImpl
 * @see com.sohlman.liferay.service.TestServiceUtil
 * @generated
 */
public abstract class TestServiceBaseImpl extends BaseServiceImpl
    implements TestService, IdentifiableBean {
    @BeanReference(type = com.sohlman.liferay.service.TestLocalService.class)
    protected com.sohlman.liferay.service.TestLocalService testLocalService;
    @BeanReference(type = com.sohlman.liferay.service.TestService.class)
    protected com.sohlman.liferay.service.TestService testService;
    @BeanReference(type = TestPersistence.class)
    protected TestPersistence testPersistence;
    @BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
    protected com.liferay.counter.service.CounterLocalService counterLocalService;
    @BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
    protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
    @BeanReference(type = com.liferay.portal.service.UserLocalService.class)
    protected com.liferay.portal.service.UserLocalService userLocalService;
    @BeanReference(type = com.liferay.portal.service.UserService.class)
    protected com.liferay.portal.service.UserService userService;
    @BeanReference(type = UserPersistence.class)
    protected UserPersistence userPersistence;
    private String _beanIdentifier;
    private ClassLoader _classLoader;
    private TestServiceClpInvoker _clpInvoker = new TestServiceClpInvoker();

    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. Always use {@link com.sohlman.liferay.service.TestServiceUtil} to access the test remote service.
     */

    /**
     * Returns the test local service.
     *
     * @return the test local service
     */
    public com.sohlman.liferay.service.TestLocalService getTestLocalService() {
        return testLocalService;
    }

    /**
     * Sets the test local service.
     *
     * @param testLocalService the test local service
     */
    public void setTestLocalService(
        com.sohlman.liferay.service.TestLocalService testLocalService) {
        this.testLocalService = testLocalService;
    }

    /**
     * Returns the test remote service.
     *
     * @return the test remote service
     */
    public com.sohlman.liferay.service.TestService getTestService() {
        return testService;
    }

    /**
     * Sets the test remote service.
     *
     * @param testService the test remote service
     */
    public void setTestService(
        com.sohlman.liferay.service.TestService testService) {
        this.testService = testService;
    }

    /**
     * Returns the test persistence.
     *
     * @return the test persistence
     */
    public TestPersistence getTestPersistence() {
        return testPersistence;
    }

    /**
     * Sets the test persistence.
     *
     * @param testPersistence the test persistence
     */
    public void setTestPersistence(TestPersistence testPersistence) {
        this.testPersistence = testPersistence;
    }

    /**
     * Returns the counter local service.
     *
     * @return the counter local service
     */
    public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
        return counterLocalService;
    }

    /**
     * Sets the counter local service.
     *
     * @param counterLocalService the counter local service
     */
    public void setCounterLocalService(
        com.liferay.counter.service.CounterLocalService counterLocalService) {
        this.counterLocalService = counterLocalService;
    }

    /**
     * Returns the resource local service.
     *
     * @return the resource local service
     */
    public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
        return resourceLocalService;
    }

    /**
     * Sets the resource local service.
     *
     * @param resourceLocalService the resource local service
     */
    public void setResourceLocalService(
        com.liferay.portal.service.ResourceLocalService resourceLocalService) {
        this.resourceLocalService = resourceLocalService;
    }

    /**
     * Returns the user local service.
     *
     * @return the user local service
     */
    public com.liferay.portal.service.UserLocalService getUserLocalService() {
        return userLocalService;
    }

    /**
     * Sets the user local service.
     *
     * @param userLocalService the user local service
     */
    public void setUserLocalService(
        com.liferay.portal.service.UserLocalService userLocalService) {
        this.userLocalService = userLocalService;
    }

    /**
     * Returns the user remote service.
     *
     * @return the user remote service
     */
    public com.liferay.portal.service.UserService getUserService() {
        return userService;
    }

    /**
     * Sets the user remote service.
     *
     * @param userService the user remote service
     */
    public void setUserService(
        com.liferay.portal.service.UserService userService) {
        this.userService = userService;
    }

    /**
     * Returns the user persistence.
     *
     * @return the user persistence
     */
    public UserPersistence getUserPersistence() {
        return userPersistence;
    }

    /**
     * Sets the user persistence.
     *
     * @param userPersistence the user persistence
     */
    public void setUserPersistence(UserPersistence userPersistence) {
        this.userPersistence = userPersistence;
    }

    public void afterPropertiesSet() {
        Class<?> clazz = getClass();

        _classLoader = clazz.getClassLoader();
    }

    public void destroy() {
    }

    /**
     * Returns the Spring bean ID for this bean.
     *
     * @return the Spring bean ID for this bean
     */
    @Override
    public String getBeanIdentifier() {
        return _beanIdentifier;
    }

    /**
     * Sets the Spring bean ID for this bean.
     *
     * @param beanIdentifier the Spring bean ID for this bean
     */
    @Override
    public void setBeanIdentifier(String beanIdentifier) {
        _beanIdentifier = beanIdentifier;
    }

    @Override
    public Object invokeMethod(String name, String[] parameterTypes,
        Object[] arguments) throws Throwable {
        Thread currentThread = Thread.currentThread();

        ClassLoader contextClassLoader = currentThread.getContextClassLoader();

        if (contextClassLoader != _classLoader) {
            currentThread.setContextClassLoader(_classLoader);
        }

        try {
            return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
        } finally {
            if (contextClassLoader != _classLoader) {
                currentThread.setContextClassLoader(contextClassLoader);
            }
        }
    }

    protected Class<?> getModelClass() {
        return Test.class;
    }

    protected String getModelClassName() {
        return Test.class.getName();
    }

    /**
     * Performs an SQL query.
     *
     * @param sql the sql query
     */
    protected void runSQL(String sql) throws SystemException {
        try {
            DataSource dataSource = testPersistence.getDataSource();

            SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
                    sql, new int[0]);

            sqlUpdate.update();
        } catch (Exception e) {
            throw new SystemException(e);
        }
    }
}
